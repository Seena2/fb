import AtRule from './at-rule.js'
import Comment from './comment.js'
import Declaration from './declaration.js'
import Node, { ChildNode, ChildProps, NodeProps } from './node.js'
import Rule from './rule.js'

declare namespace Container {
  export class ContainerWithChildren<
    Child extends Node = ChildNode
  > extends Container_<Child> {
    nodes: Child[]
  }

  export interface ValueOptions {
    /**
     * String that’s used to narrow down values and speed up the regexp search.
     */
    fast?: string

    /**
     * An array of property names.
     */
    props?: readonly string[]
  }

  export interface ContainerProps extends NodeProps {
    nodes?: readonly (ChildProps | Node)[]
  }

  /**
   * All types that can be passed into container methods to create or add a new
   * child node.
   */
  export type NewChild =
    | ChildProps
    | Node
    | readonly ChildProps[]
    | readonly Node[]
    | readonly string[]
    | string
    | undefined

  // eslint-disable-next-line @typescript-eslint/no-use-before-define
  export { Container_ as default }
}

/**
 * The `Root`, `AtRule`, and `Rule` container nodes
 * inherit some common methods to help work with their children.
 *
 * Note that all containers can store any content. If you write a rule inside
 * a rule, PostCSS will parse it.
 */
declare abstract class Container_<Child extends Node = ChildNode> extends Node {
  /**
   * An array containing the container’s children.
   *
   * ```js
   * const root = postcss.parse('a { color: black }')
   * root.nodes.length           //=> 1
   * root.nodes[0].selector      //=> 'a'
   * root.nodes[0].nodes[0].prop //=> 'color'
   * ```
   */
  nodes: Child[] | undefined

  /**
   * An internal method that converts a {@link NewChild} into a list of actual
   * child nodes that can then be added to this container.
   *
   * This ensures that the nodes' parent is set to this container, that they use
   * the correct prototype chain, and that they're marked as dirty.
   *
   * @param mnodes The new node or nodes to add.
   * @param sample A node from whose raws the new node's `